exports['should load a simple query 1'] = {
  "kind": "Document",
  "definitions": [
    {
      "kind": "OperationDefinition",
      "operation": "query",
      "name": {
        "kind": "Name",
        "value": "X"
      },
      "variableDefinitions": [],
      "directives": [],
      "selectionSet": {
        "kind": "SelectionSet",
        "selections": [
          {
            "kind": "Field",
            "alias": null,
            "name": {
              "kind": "Name",
              "value": "x"
            },
            "arguments": [],
            "directives": [],
            "selectionSet": null
          },
          {
            "kind": "Field",
            "alias": null,
            "name": {
              "kind": "Name",
              "value": "y"
            },
            "arguments": [],
            "directives": [],
            "selectionSet": null
          },
          {
            "kind": "Field",
            "alias": null,
            "name": {
              "kind": "Name",
              "value": "z"
            },
            "arguments": [],
            "directives": [],
            "selectionSet": null
          }
        ]
      }
    }
  ],
  "loc": {
    "start": 0,
    "end": 24
  }
}

exports['should load an imported fragment 1'] = {
  "kind": "Document",
  "definitions": [
    {
      "kind": "OperationDefinition",
      "operation": "query",
      "name": {
        "kind": "Name",
        "value": "X"
      },
      "variableDefinitions": [],
      "directives": [],
      "selectionSet": {
        "kind": "SelectionSet",
        "selections": [
          {
            "kind": "Field",
            "alias": null,
            "name": {
              "kind": "Name",
              "value": "x"
            },
            "arguments": [],
            "directives": [],
            "selectionSet": null
          },
          {
            "kind": "Field",
            "alias": null,
            "name": {
              "kind": "Name",
              "value": "y"
            },
            "arguments": [],
            "directives": [],
            "selectionSet": null
          },
          {
            "kind": "FragmentSpread",
            "name": {
              "kind": "Name",
              "value": "Z"
            },
            "directives": []
          }
        ]
      }
    },
    {
      "kind": "FragmentDefinition",
      "name": {
        "kind": "Name",
        "value": "Z"
      },
      "typeCondition": {
        "kind": "NamedType",
        "name": {
          "kind": "Name",
          "value": "Z"
        }
      },
      "directives": [],
      "selectionSet": {
        "kind": "SelectionSet",
        "selections": [
          {
            "kind": "Field",
            "alias": null,
            "name": {
              "kind": "Name",
              "value": "z"
            },
            "arguments": [],
            "directives": [],
            "selectionSet": null
          }
        ]
      }
    }
  ],
  "loc": {
    "start": 0,
    "end": 57
  }
}

exports['should ignore duplicate an imported fragment 1'] = {
  "kind": "Document",
  "definitions": [
    {
      "kind": "OperationDefinition",
      "operation": "query",
      "name": {
        "kind": "Name",
        "value": "X"
      },
      "variableDefinitions": [],
      "directives": [],
      "selectionSet": {
        "kind": "SelectionSet",
        "selections": [
          {
            "kind": "FragmentSpread",
            "name": {
              "kind": "Name",
              "value": "a"
            },
            "directives": []
          },
          {
            "kind": "FragmentSpread",
            "name": {
              "kind": "Name",
              "value": "b"
            },
            "directives": []
          }
        ]
      }
    },
    {
      "kind": "FragmentDefinition",
      "name": {
        "kind": "Name",
        "value": "A"
      },
      "typeCondition": {
        "kind": "NamedType",
        "name": {
          "kind": "Name",
          "value": "A"
        }
      },
      "directives": [],
      "selectionSet": {
        "kind": "SelectionSet",
        "selections": [
          {
            "kind": "FragmentSpread",
            "name": {
              "kind": "Name",
              "value": "C"
            },
            "directives": []
          }
        ]
      }
    },
    {
      "kind": "FragmentDefinition",
      "name": {
        "kind": "Name",
        "value": "C"
      },
      "typeCondition": {
        "kind": "NamedType",
        "name": {
          "kind": "Name",
          "value": "C"
        }
      },
      "directives": [],
      "selectionSet": {
        "kind": "SelectionSet",
        "selections": [
          {
            "kind": "Field",
            "alias": null,
            "name": {
              "kind": "Name",
              "value": "c"
            },
            "arguments": [],
            "directives": [],
            "selectionSet": null
          }
        ]
      }
    },
    {
      "kind": "FragmentDefinition",
      "name": {
        "kind": "Name",
        "value": "B"
      },
      "typeCondition": {
        "kind": "NamedType",
        "name": {
          "kind": "Name",
          "value": "B"
        }
      },
      "directives": [],
      "selectionSet": {
        "kind": "SelectionSet",
        "selections": [
          {
            "kind": "FragmentSpread",
            "name": {
              "kind": "Name",
              "value": "C"
            },
            "directives": []
          }
        ]
      }
    }
  ],
  "loc": {
    "start": 0,
    "end": 71
  }
}

exports['validates graphql query 1'] = {
  "kind": "Document",
  "definitions": [
    {
      "kind": "OperationDefinition",
      "operation": "query",
      "name": {
        "kind": "Name",
        "value": "X"
      },
      "variableDefinitions": [],
      "directives": [],
      "selectionSet": {
        "kind": "SelectionSet",
        "selections": [
          {
            "kind": "Field",
            "alias": null,
            "name": {
              "kind": "Name",
              "value": "y"
            },
            "arguments": [],
            "directives": [],
            "selectionSet": {
              "kind": "SelectionSet",
              "selections": [
                {
                  "kind": "Field",
                  "alias": null,
                  "name": {
                    "kind": "Name",
                    "value": "z"
                  },
                  "arguments": [],
                  "directives": [],
                  "selectionSet": null
                }
              ]
            }
          }
        ]
      }
    }
  ],
  "loc": {
    "start": 0,
    "end": 28
  }
}

exports['fails to parse invalid document 1'] = {
  "errors": [
    "./test/fixtures/fail-invalid-document/query.graphql\nModule build failed: GraphQLError: Syntax Error GraphQL request (2:3) Expected Name, found [\n\n1: query X {\n2:   []\n     ^\n3: }\n\n    at syntaxError (/Users/stephen/git/graphql-loader/node_modules/graphql/error/syntaxError.js:31:15)\n    at expect (/Users/stephen/git/graphql-loader/node_modules/graphql/language/parser.js:973:32)\n    at parseName (/Users/stephen/git/graphql-loader/node_modules/graphql/language/parser.js:91:15)\n    at parseField (/Users/stephen/git/graphql-loader/node_modules/graphql/language/parser.js:276:21)\n    at parseSelection (/Users/stephen/git/graphql-loader/node_modules/graphql/language/parser.js:265:72)\n    at many (/Users/stephen/git/graphql-loader/node_modules/graphql/language/parser.js:1022:16)\n    at parseSelectionSet (/Users/stephen/git/graphql-loader/node_modules/graphql/language/parser.js:253:17)\n    at parseOperationDefinition (/Users/stephen/git/graphql-loader/node_modules/graphql/language/parser.js:189:19)\n    at parseDefinition (/Users/stephen/git/graphql-loader/node_modules/graphql/language/parser.js:136:16)\n    at parseDocument (/Users/stephen/git/graphql-loader/node_modules/graphql/language/parser.js:109:22)\n    at parse (/Users/stephen/git/graphql-loader/node_modules/graphql/language/parser.js:46:10)\n    at parseDocument (/Users/stephen/git/graphql-loader/node_modules/graphql-tag/src/index.js:128:16)\n    at Function.gql [as default] (/Users/stephen/git/graphql-loader/node_modules/graphql-tag/src/index.js:161:10)\n    at /Users/stephen/git/graphql-loader/lib/loader.ts:82:35\n    at step (/Users/stephen/git/graphql-loader/lib/loader.ts:40:23)\n    at Object.next (/Users/stephen/git/graphql-loader/lib/loader.ts:21:53)\n    at /Users/stephen/git/graphql-loader/lib/loader.ts:15:71\n    at Promise (<anonymous>)\n    at __awaiter (/Users/stephen/git/graphql-loader/lib/loader.ts:11:12)\n    at loadSource (/Users/stephen/git/graphql-loader/lib/loader.ts:121:12)\n    at Object.<anonymous> (/Users/stephen/git/graphql-loader/lib/loader.ts:134:28)\n    at step (/Users/stephen/git/graphql-loader/lib/loader.ts:40:23)\n    at Object.next (/Users/stephen/git/graphql-loader/lib/loader.ts:21:53)\n    at /Users/stephen/git/graphql-loader/lib/loader.ts:15:71\n    at Promise (<anonymous>)\n    at __awaiter (/Users/stephen/git/graphql-loader/lib/loader.ts:11:12)\n    at Object.loader (/Users/stephen/git/graphql-loader/lib/loader.ts:152:12)"
  ]
}

exports['fails to validate invalid field 1'] = {
  "errors": [
    "./test/fixtures/fail-invalid-field/query.graphql\nCannot query field \"q\" on type \"Y\". Did you mean \"z\"?\nGraphQLError: Cannot query field \"q\" on type \"Y\". Did you mean \"z\"?\n    at Object.Field (/Users/stephen/git/graphql-loader/node_modules/graphql/validation/rules/FieldsOnCorrectType.js:66:31)\n    at Object.enter (/Users/stephen/git/graphql-loader/node_modules/graphql/language/visitor.js:297:29)\n    at Object.enter (/Users/stephen/git/graphql-loader/node_modules/graphql/language/visitor.js:339:25)\n    at visit (/Users/stephen/git/graphql-loader/node_modules/graphql/language/visitor.js:229:26)\n    at visitUsingRules (/Users/stephen/git/graphql-loader/node_modules/graphql/validation/validate.js:76:22)\n    at Object.validate (/Users/stephen/git/graphql-loader/node_modules/graphql/validation/validate.js:61:10)\n    at Object.<anonymous> (/Users/stephen/git/graphql-loader/lib/loader.ts:139:26)\n    at step (/Users/stephen/git/graphql-loader/lib/loader.ts:40:23)\n    at Object.next (/Users/stephen/git/graphql-loader/lib/loader.ts:21:53)\n    at fulfilled (/Users/stephen/git/graphql-loader/lib/loader.ts:12:58)\n    at <anonymous>"
  ]
}

exports['fails to validate missing fragment 1'] = {
  "errors": [
    "./test/fixtures/fail-missing-fragment/query.graphql\nUnknown fragment \"Q\".\nGraphQLError: Unknown fragment \"Q\".\n    at Object.FragmentSpread (/Users/stephen/git/graphql-loader/node_modules/graphql/validation/rules/KnownFragmentNames.js:36:29)\n    at Object.enter (/Users/stephen/git/graphql-loader/node_modules/graphql/language/visitor.js:297:29)\n    at Object.enter (/Users/stephen/git/graphql-loader/node_modules/graphql/language/visitor.js:339:25)\n    at visit (/Users/stephen/git/graphql-loader/node_modules/graphql/language/visitor.js:229:26)\n    at visitUsingRules (/Users/stephen/git/graphql-loader/node_modules/graphql/validation/validate.js:76:22)\n    at Object.validate (/Users/stephen/git/graphql-loader/node_modules/graphql/validation/validate.js:61:10)\n    at Object.<anonymous> (/Users/stephen/git/graphql-loader/lib/loader.ts:139:26)\n    at step (/Users/stephen/git/graphql-loader/lib/loader.ts:40:23)\n    at Object.next (/Users/stephen/git/graphql-loader/lib/loader.ts:21:53)\n    at fulfilled (/Users/stephen/git/graphql-loader/lib/loader.ts:12:58)\n    at <anonymous>"
  ]
}

